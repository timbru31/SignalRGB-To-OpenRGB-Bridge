import type { RGBColor } from "./device";
/**
 * converts RGB values to an RGB-object
 * @param {number} r red value
 * @param {number} g green value
 * @param {number} b blue value
 */
export declare function color(r: number, g: number, b: number): RGBColor;
/**
 * converts a hex string to an RGB-Object
 * @param {string} hex the hex-string, does not have to start with a hashtag
 */
export declare function hexColor(hex: string): RGBColor;
/**
 * converts HSL values to an RGB-object based on the work of [mjackson](https://gist.github.com/mjackson/5311256)
 * @param {number} h hue value [0, 359]
 * @param {number} s saturation value [0, 1]
 * @param {number} l lightness value [0, 1]
 */
export declare function HSLColor(h: number, s: number, l: number): RGBColor;
/**
 * converts HSV values to an RGB-object based on the [wikipedia article](https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB)
 * @param {number} h hue value [0, 359]
 * @param {number} s saturation value [0, 1]
 * @param {number} v value value [0, 1]
 */
export declare function HSVColor(h: number, s: number, v: number): RGBColor;
/**
 * outputs a random color
 */
export declare function randomColor(): RGBColor;
/**
 * outputs a random color, that is more colourful than .randomColor()
 */
export declare function randomHColor(): RGBColor;
export declare const command: {
    requestControllerCount: number;
    requestControllerData: number;
    requestProtocolVersion: number;
    setClientName: number;
    deviceListUpdated: number;
    requestRescanDevices: number;
    requestProfileList: number;
    saveProfile: number;
    loadProfile: number;
    deleteProfile: number;
    requestPluginList: number;
    pluginSpecific: number;
    resizeZone: number;
    clearSegments: number;
    addSegment: number;
    updateLeds: number;
    updateZoneLeds: number;
    updateSingleLed: number;
    setCustomMode: number;
    updateMode: number;
    saveMode: number;
};
export declare const deviceType: {
    motherboard: number;
    dram: number;
    gpu: number;
    cooler: number;
    ledstrip: number;
    keyboard: number;
    mouse: number;
    mousemat: number;
    headset: number;
    headsetStand: number;
    gamepad: number;
    light: number;
    speaker: number;
    virtual: number;
    storage: number;
    unknown: number;
};
export declare const direction: {
    left: number;
    right: number;
    up: number;
    down: number;
    horizontal: number;
    vertical: number;
};
//# sourceMappingURL=utils.d.ts.map